//| mill-version: 1.0.5
//| mvnDeps: ["org.typelevel::scalac-options:0.1.8"]

import scala.util.Success
import scala.util.Try
import mill.scalalib.scalafmt.*
import mill.*, scalalib.*, publish.*
import mill.api.BuildCtx
import org.typelevel.scalacoptions.*

object `indigo-plugin` extends Cross[IndigoPluginModule]("2.12", "3")

trait IndigoPluginModule extends CrossScalaModule with SonatypeCentralPublishModule with ScalafmtModule {

  def indigoVersion = Task.Input(IndigoVersion.getVersion(BuildCtx.workspaceRoot))

  def scalaVersion =
    crossScalaVersion match {
      case "2.12" => "2.12.20" // Sadly required until Scala.js is available for sbt 2.0
      case _      => "3.7.1"
    }

  def artifactName = "indigo-plugin"

  def mvnDeps =
    Seq(
      mvn"com.lihaoyi::os-lib:0.11.5",
      mvn"io.circe::circe-core:0.14.14",
      mvn"io.circe::circe-parser:0.14.14"
    )

  def publishVersion = indigoVersion()

  def pomSettings =
    PomSettings(
      description = "indigo-plugin",
      organization = "io.indigoengine",
      url = "https://github.com/PurpleKingdomGames/indigo",
      licenses = Seq(License.MIT),
      versionControl = VersionControl.github("PurpleKingdomGames", "indigo"),
      developers = Seq(
        Developer("davesmith00000", "David Smith", "https://github.com/davesmith00000")
      )
    )

  override def scalacOptions =
    Task {
      super.scalacOptions()
        // Bring back when we can finally remove 2.12 support...
        // ++
        // ScalacOptions.tokensForVersion(
        //   ScalaVersion.unsafeFromString(scalaVersion()),
        //   ScalacOptions.default ++ ScalacOptions.fatalWarningOptions
        // )
    }

  object test extends ScalaTests {
    def mvnDeps =
      Seq(
        mvn"org.scalameta::munit:1.2.0"
      )

    def testFramework = "munit.Framework"
  }
}

object IndigoVersion {
  def getVersion(workspaceDir: os.Path): String = {
    def rec(wd: os.Path, file: String, levels: Int, version: Option[String]): String = {
      val msg = "ERROR: Couldn't find indigo version."
      version match {
        case Some(v) =>
          println(s"""Indigo version set to '$v'""")
          v

        case None if levels < 3 =>
          try {
            val v = os.read.lines(wd / file).head
            rec(wd, file, levels, Some(v))
          } catch {
            case _: Throwable =>
              rec(wd / os.RelPath.up, file, levels + 1, None)
          }

        case None =>
          println(msg)
          throw new Exception(msg)
      }
    }

    rec(workspaceDir, ".indigo-version", 0, None)
  }
}
