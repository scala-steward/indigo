//| mill-version: 1.0.5
//| mvnDeps: ["org.typelevel::scalac-options:0.1.8"]

import mill.scalalib.scalafmt.*

import mill.*, scalalib.*, publish.*
import mill.api.BuildCtx
import org.typelevel.scalacoptions.*
import mill.util.BuildInfo.{millVersion, millBinPlatform}

object `mill-indigo` extends ScalaModule, PublishModule, SonatypeCentralPublishModule, ScalafmtModule {

  def scalaVersion = "3.7.3"

  def platformSuffix = s"_mill$millBinPlatform"

  def indigoVersion = Task.Input { IndigoVersion.getVersion(BuildCtx.workspaceRoot) }

  def mvnDeps = Seq(
    mvn"com.lihaoyi::mill-libs:$millVersion",
    mvn"com.lihaoyi::os-lib:0.11.5",
    mvn"io.indigoengine::indigo-plugin:${indigoVersion()}"
  )

  override def scalacOptions = Task {
    super.scalacOptions() ++
      ScalacOptions.tokensForVersion(
        ScalaVersion.unsafeFromString(scalaVersion()),
        ScalacOptions.default ++ ScalacOptions.fatalWarningOptions
      )
  }

  object test extends ScalaTests {
    def mvnDeps = Seq(mvn"org.scalameta::munit:1.2.0")

    def testFramework = "munit.Framework"
  }

  def publishVersion = indigoVersion()

  def pomSettings = PomSettings(
    description = "mill-indigo",
    organization = "io.indigoengine",
    url = "https://github.com/PurpleKingdomGames/indigo",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github("PurpleKingdomGames", "indigo"),
    developers = Seq(
      Developer("davesmith00000", "David Smith", "https://github.com/davesmith00000")
    )
  )

}

object IndigoVersion {
  def getVersion(workspaceDir: os.Path): String = {
    def rec(wd: os.Path, file: String, levels: Int, version: Option[String]): String = {
      val msg = "ERROR: Couldn't find indigo version."
      version match {
        case Some(v) =>
          println(s"""Indigo version set to '$v'""")
          v

        case None if levels < 3 =>
          try {
            val v = os.read.lines(wd / file).head
            rec(wd, file, levels, Some(v))
          } catch {
            case _: Throwable =>
              rec(wd / os.RelPath.up, file, levels + 1, None)
          }

        case None =>
          println(msg)
          throw new Exception(msg)
      }
    }

    rec(workspaceDir, ".indigo-version", 0, None)
  }
}
